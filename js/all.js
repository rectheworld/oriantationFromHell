// Generated by CoffeeScript 1.8.0
var BunnyDefender, game;

BunnyDefender = {};

BunnyDefender.Boot = function(game) {};

BunnyDefender.Boot.prototype = {
  preload: function() {
    this.load.image('preloaderBar', 'images/loader_bar.png');
    this.load.image('youDied', 'images/youDied.png');
    this.load.image('randomVict', 'images/randomVict.png');
    this.load.image('devilPuppet', 'images/devilPuppet.png');
    this.load.image('nextButton_spr', 'images/next.png');
      
    this.load.image('textbox_left', 'images/textbox1.png');
    this.load.image('textbox_right', 'images/textbox2.png');
    this.load.image('yourThoughts', 'images/yourThoughts.png');
      
    
      
    this.load.video('whatIsHell', 'images/small.mp4');
  },
  create: function() {
//    this.input.maxPointers = 1;
    this.stage.disableVisibilityChange = false;
//    this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
    this.scale.minWidth = 270;
    this.scale.minHeight = 480;
    this.scale.pageAlignHorizontally = true;
    this.scale.pageAlignVertically = true;
    this.stage.forcePortrait = true;
//    this.scale.setScreenSize(true);
//    this.scale.updateLayout(true)
    this.input.addPointer();
    this.stage.backgroundColor = '#171649';
    this.state.start('Preloader');
  }
};

BunnyDefender.Preloader = function(game) {
  this.preloadBar = this.titleText = null;
  this.ready = false;
};

BunnyDefender.Preloader.prototype = {
    
  preload: function() {
    this.preloadBar = this.add.sprite(this.world.centerX, this.world.centerY, 'preloaderBar');
    this.preloadBar.anchor.setTo(0.5, 0.5);
    this.load.setPreloadSprite(this.preloadBar);
//    this.titleText = this.add.image(this.world.centerX, this.world.centerY - 220, 'titleimage');
//    this.titleText.anchor.setTo(0.5, 0.5);
      
//    this.load.image('titlescreen', 'images/TitleBG.png');
    this.load.bitmapFont('eightbitwonder', 'fonts/eightbitwonder.png', 'fonts/eightbitwonder.fnt');
    
    this.load.image('hellBackground', 'images/hellBackground.png');
    this.load.image('stage', 'images/stage.png');
//    this.load.image('hill', 'images/hill.png');
//    this.load.atlasXML('bunny', 'images/spritesheets/bunny.png', 'images/spritesheets/bunny.xml');
//    this.load.atlasXML('spacerock', 'images/spritesheets/SpaceRock.png', 'images/spritesheets/SpaceRock.xml');
    
//      this.load.image('explosion', 'images/explosion.png');
//    this.load.image('ghost', 'images/ghost.png');
//    this.load.audio('explosion_audio', 'audio/explosion.mp3');
//    this.load.audio('hurt_audio', 'audio/hurt.mp3');
    this.load.audio('select_audio', 'audio/select.mp3');
//    this.load.audio('game_audio', 'audio/bgm.mp3');
  },
  create: function() {
//    this.preloadBar.cropEnabled = false;
  },
  update: function() {
//    if (this.cache.isSoundDecoded('game_audio') && !this.ready) {
//      this.ready = true;
//      this.state.start('StartMenu');
//    }
      this.state.start('StartMenu');
  }
}; // End preloader 



BunnyDefender.StartMenu = function(game) {
  this.startBG = this.startPrompt = this.ding = null;
};

BunnyDefender.StartMenu.prototype = {
  create: function() {
//    this.ding = this.add.audio('select_audio');
    this.startBG = this.add.image(this.world.centerX - 100, this.world.centerY - 100, 'youDied');
    this.startBG.inputEnabled = true;
    this.startBG.events.onInputDown.addOnce(this.startGame, this);
//    this.startPrompt = this.add.bitmapText(this.world.centerX - 155, this.world.centerY, 'eightbitwonder', 'Touch to Start!', 24);
  },
  startGame: function(pointer) {
//    this.ding.play();
    this.state.start('Game');
  }
};


BunnyDefender.Game = function(game) {
//  this.totalBunnies = null;
//  this.bunnyGroup = null;
//  this.totalSpacerocks = null;
//  this.spacerockgroup = null;
//  this.burst = null;
//  this.gameover = null;
//  this.countdown = null;
//  this.overmessage = null;
//  this.secondsElapsed = null;
//  this.timer = null;
//  this.music = null;
//  this.ouch = null;
//  this.boom = null;
//  this.ding = null;
};

BunnyDefender.Game.prototype = {
    
  create: function() {
      
//    this.gameover = false;
//    this.secondsElapsed = 0;
    this.timer = this.time.create(false);
    this.timer.loop(1000, this.updateSeconds, this);
//    this.totalBunnies = 20;
//    this.totalSpacerocks = 13;
//    this.music = this.add.audio('game_audio');
//    this.music.play('', 0, 0.3, true);
//    this.ouch = this.add.audio('hurt_audio');
//    this.boom = this.add.audio('explosion_audio');
//    this.ding = this.add.audio('select_audio');
   
      this.buildWorld();
  },
    
  updateSeconds: function() {
    return this.secondsElapsed++;
  },
    
  buildWorld: function() {
    this.add.image(-1, -1, 'hellBackground');
    
    this.add.image(250, 200, 'devilPuppet');  
      
    this.add.image(80, 18, 'stage');
    this.add.image(0, 250, 'randomVict'); 
    this.add.image(100, 250, 'randomVict');
    this.add.image(200, 250, 'randomVict');
    this.add.image(300, 250, 'randomVict');  
    this.add.image(400, 250, 'randomVict');  
    this.add.image(500, 250, 'randomVict'); 
      
      
    //    this.add.image(0, 800, 'hill');
    //    this.buildBunnies();
    //    this.buildSpaceRocks();
    //    this.buildEmitter();
    //    this.countdown = this.add.bitmapText(10, 10, 'eightbitwonder', "Bunnies Left " + this.totalBunnies, 20);

    this.marquee = this.add.bitmapText(140, 0, 'eightbitwonder', "Welcome to Hell", 20);
      
      
    this.introPhase(this);  

//    /// This looks like it could go into a Phase Function 
//      
//    this.introText_array = ["Welcome to Hell!",
//                           "We are so happy to have you join us!",
//                           "I am Crawley, and I'll be your Councilor during oriantation.",
//                           "First lets watch a short video to learn about the history of Hell!"
//                           ];
//      
//    this.whatIsHell_array = ["Wow, did you know Hell had such a great History!",
//                            "What stood out to you most about that video?"]
//    
//    this.textPhases = [this.introText_array, this.whatIsHell_array]
//    
//    this.currentTextPhaseIndex = 0 ;
//    this.currentTextIndex = 0 ;
//    
//    var style = { font: 'bold 13pt Arial', fill: 'white', align: 'left', wordWrap: true, wordWrapWidth: 240 };
//
//    this.mainText = game.add.text(170, 100, this.textPhases[this.currentTextPhaseIndex][this.currentTextIndex], style);
//      
//  
//    this.marquee = this.add.bitmapText(140, 0, 'eightbitwonder', "Welcome to Hell", 20);
//      
//    nextButton = game.add.button(340, 200, 'nextButton_spr', updateText, this, 2, 1, 0);
//      
//
//    function updateText() {
//
//        this.currentTextIndex++
//
//        if (this.currentTextIndex === this.introText_array.length){
//            
//            this.video =this.add.video('whatIsHell')
//            this.videoSprite = this.video.addToWorld(this.world.centerX, this.world.centerY, 0.5, 0.5);
//            
//            this.video.onComplete.add(this.handleOnComplet, this);	
//            
//            this.video.play();
//            
//            this.currentTextIndex = 0
//            this.currentTextPhaseIndex++
//            
//            this.mainText.setText(this.textPhases[this.currentTextPhaseIndex][this.currentTextIndex]);
//            
//            
//        }else{
//            this.mainText.setText(this.textPhases[this.currentTextPhaseIndex][this.currentTextIndex]);
//            
//        }
//        
//    } // End updateText 
//      
//    function actionOnClick () {
//
//    console.log('Click')
//
//    }
      
    this.timer.start();
  }, /// End of Build World
    
    //// Stops the video from phase 1 
    handleOnComplet : function() {	
        this.videoSprite.destroy()
        this.video.destroy();

        },

    introPhase: function(){
        
        /// Builing Phase Componets 
        this.introText_array = ["Welcome to Hell!",
                           "We are so happy to have you join us!",
                           "I am Crawley, and I'll be your Councilor during oriantation.",
                           "First lets watch a short video to learn about the history of Hell!"
                           ];
      
        this.whatIsHell_array = ["Wow, did you know Hell had such a great History!",
                                "What stood out to you most about that video?"]
    
        this.textPhases = [this.introText_array, this.whatIsHell_array]

        this.currentTextPhaseIndex = 0 ;
        this.currentTextIndex = 0 ;

        var style = { font: 'bold 13pt Arial', fill: 'white', align: 'left', wordWrap: true, wordWrapWidth: 240 };

        this.mainText = game.add.text(170, 100, this.textPhases[this.currentTextPhaseIndex][this.currentTextIndex], style);

        this.nextButton = game.add.button(340, 200, 'nextButton_spr', updateText, this, 2, 1, 0);
        

        /// This function might need to be moved so  can be shared by the other phases
        function updateText() {

            this.currentTextIndex++

            if (this.currentTextIndex === this.textPhases[this.currentTextPhaseIndex].length){
                
                /// If the Text Phase index is 0, then play the video
                if(this.currentTextPhaseIndex === 0){

                    this.video =this.add.video('whatIsHell')
                    this.videoSprite = this.video.addToWorld(this.world.centerX, this.world.centerY, 0.5, 0.5);

                    this.video.onComplete.add(this.handleOnComplet, this);	

                    this.video.play();

                    this.currentTextIndex = 0
                    this.currentTextPhaseIndex++

                    this.mainText.setText(this.textPhases[this.currentTextPhaseIndex][this.currentTextIndex]);
                    }
                /// If the Text Phase is 1, start the peer responses 
                else if(this.currentTextPhaseIndex === 1){
                    /// Hide the next button
                    this.nextButton.visible = false;
                    
                    ///peer responses
                    
                    this.peerResponses_phase1()
                
                    }
            }else{
                this.mainText.setText(this.textPhases[this.currentTextPhaseIndex][this.currentTextIndex]);

            }

        }; // End updateText 
         
    }, /// End intro Phase 
    
    peerResponses_phase1: function(){
            /// There will be three peer respones 
            response = 0; 
        
            var styleTextbox = { font: 'bold 13pt Arial', fill: 'Black', align: 'left', wordWrap: true, wordWrapWidth: 135};
        

            // Textbook for peer one [0,120]
            var textbox1 = this.add.image(0, 120, 'textbox_left');
            textbox1.inputEnabled = true;
            
            var textbox1_text = this.add.text(0 + 8, 120 + 8, "I thought it was very Intresting. \n I learned alot about Hell. \n <click>", styleTextbox);
            
            // Textbook for peer one [350,120]
            var textbox2 = this.add.image(350, 120, 'textbox_right');
            textbox2.inputEnabled = true;
        
            
            var textbox2_text = this.add.text(350 + 8, 120 + 8, "I really felt like Hell is well established in the industry.\n <click>", styleTextbox);
        
            textbox2.visible = false;
            textbox2_text.visible = false;
        
            textbox1.events.onInputDown.add(function click(){
                textbox1.destroy(); 
                textbox1_text.destroy()
            
                textbox2.visible = true;
                textbox2_text.visible = true;
                }, this);
        
            textbox2.events.onInputDown.add(function click(){
                textbox2.destroy(); 
                textbox2_text.destroy()
                this.options_Phase1()
            }, this);
            
            
    }, /// End of peer responses 
    
    options_Phase1: function(){
        this.add.image(150, 300, 'yourThoughts');
        var styleTextbox = { font: 'bold 13pt Arial', fill: 'Black', align: 'left', wordWrap: true, wordWrapWidth: 135};
        this.add.text(220 - 10, 380, "..... omg", styleTextbox);
    },
    
//  buildEmitter: function() {
//    this.burst = this.add.emitter(0, 0, 80);
//    this.burst.minParticleScale = 0.3;
//    this.burst.maxParticleScale = 1.2;
//    this.burst.minParticleSpeed.setTo(-30, 30);
//    this.burst.maxParticleSpeed.setTo(30, -30);
//    this.burst.makeParticles('explosion');
//    this.input.onDown.add(this.fireBurst, this);
//  },
//  fireBurst: function(p) {
//    if (!this.gameover) {
//      this.boom.play();
//      this.boom.volume = 0.2;
//      this.burst.emitX = p.x;
//      this.burst.emitY = p.y;
//      this.burst.start(true, 2000, null, 20);
//    }
//  },
//  buildBunnies: function() {
//    var b, o, _i, _ref;
//    this.bunnyGroup = this.add.group();
//    this.bunnyGroup.enableBody = true;
//    for (o = _i = 0, _ref = this.totalBunnies; 0 <= _ref ? _i < _ref : _i > _ref; o = 0 <= _ref ? ++_i : --_i) {
//      b = this.bunnyGroup.create(this.rnd.integerInRange(-10, this.world.width - 50), this.rnd.integerInRange(this.world.height - 180, this.world.height - 60), 'bunny', 'Bunny0000');
//      b.anchor.setTo(0.5, 0.5);
//      b.body.moves = false;
//      b.animations.add('Rest', this.game.math.numberArray(1, 58));
//      b.animations.add('Walk', this.game.math.numberArray(68, 107));
//      b.animations.play('Rest', 24, true);
//      this.assignBunnyMovement(b);
//    }
//  },
//  assignBunnyMovement: function(b) {
//    var bdelay, bposition, t;
//    bposition = Math.floor(this.rnd.realInRange(50, this.world.width - 50));
//    bdelay = this.rnd.integerInRange(2000, 6000);
//    if (bposition < b.x) {
//      b.scale.x = 1;
//    } else {
//      b.scale.x = -1;
//    }
//    t = this.add.tween(b).to({
//      x: bposition
//    }, 3500, Phaser.Easing.Quadratic.InOut, true, bdelay);
//    t.onStart.add(this.startBunny, this);
//    t.onComplete.add(this.stopBunny, this);
//  },
//  startBunny: function(b) {
//    b.animations.stop('Rest');
//    b.animations.play('Walk', 24, true);
//  },
//  stopBunny: function(b) {
//    b.animations.stop('Walk');
//    b.animations.play('Rest', 24, true);
//    this.assignBunnyMovement(b);
//  },
//  buildSpaceRocks: function() {
//    var o, r, scale, _i, _ref;
//    this.spacerockgroup = this.add.group();
//    for (o = _i = 0, _ref = this.totalSpacerocks; 0 <= _ref ? _i < _ref : _i > _ref; o = 0 <= _ref ? ++_i : --_i) {
//      r = this.spacerockgroup.create(this.rnd.integerInRange(0, this.world.width), this.rnd.realInRange(-1500, 0), 'spacerock', 'SpaceRock0000');
//      scale = this.rnd.realInRange(0.3, 1.0);
//      r.scale.x = scale;
//      r.scale.y = scale;
//      this.physics.enable(r, Phaser.Physics.ARCADE);
//      r.enableBody = true;
//      r.body.velocity.y = this.rnd.realInRange(200, 400);
//      r.animations.add('Fall');
//      r.animations.play('Fall', 24, true);
//      r.checkWorldBounds = true;
//      r.events.onOutOfBounds.add(this.resetRock, this);
//    }
//  },
//  resetRock: function(r) {
//    if (r.y > this.world.height) {
//      return this.respawnRock(r);
//    }
//  },
//  respawnRock: function(r) {
//    if (!this.gameover) {
//      r.reset(this.rnd.integerInRange(0, this.world.width), this.rnd.realInRange(-1500, 0));
//      return r.body.velocity.y = this.rnd.realInRange(200, 400);
//    }
//  },
//  burstCollision: function(r, b) {
//    return this.respawnRock(r);
//  },
//  bunnyCollision: function(r, b) {
//    if (b.exists) {
//      this.ouch.play();
//      this.resetRock(r);
//      this.makeGhost(b);
//      b.kill();
//      this.totalBunnies--;
//      this.checkBunniesLeft();
//    }
//  },
//  checkBunniesLeft: function() {
//    if (this.totalBunnies <= 0) {
//      this.music.stop();
//      console.log("");
//      this.gameover = true;
//      this.countdown.setText("Bunnies Left 0");
//      this.overmessage = this.add.bitmapText(this.world.centerX - 180, this.world.centerY - 40, 'eightbitwonder', "Game Over\n\n " + this.secondsElapsed, 42);
//      this.overmessage.align = 'center';
//      this.overmessage.inputEnabled = true;
//      this.overmessage.events.onInputDown.addOnce(this.quitGame, this);
//    } else {
//      this.countdown.setText("Bunnies Left " + this.totalBunnies);
//    }
//  },
//  quitGame: function() {
//    this.ding.play();
//    this.state.start('StartMenu');
//  },
//  friendlyFire: function(b, e) {
//    if (b.exists) {
//      this.ouch.play();
//      b.kill();
//      this.makeGhost(b);
//      this.totalBunnies--;
//      this.checkBunniesLeft();
//    }
//  },
//  makeGhost: function(b) {
//    var bunnyGhost;
//    bunnyGhost = this.add.sprite(b.x - 20, b.y - 180, 'ghost');
//    bunnyGhost.anchor.setTo(0.5, 0.5);
//    bunnyGhost.scale.x = b.scale.x;
//    this.physics.enable(bunnyGhost, Phaser.Physics.ARCADE);
//    bunnyGhost.enableBody = true;
//    bunnyGhost.checkWorldBounds = true;
//    bunnyGhost.body.velocity.y = -800;
//  },
  update: function() {
//    this.physics.arcade.overlap(this.spacerockgroup, this.burst, this.burstCollision, null, this);
//    this.physics.arcade.overlap(this.spacerockgroup, this.bunnyGroup, this.bunnyCollision, null, this);
//    return this.physics.arcade.overlap(this.bunnyGroup, this.burst, this.friendlyFire, null, this);
  }
};

game = new Phaser.Game(550, 500, Phaser.AUTO, 'gameContainer');

game.state.add('Boot', BunnyDefender.Boot);

game.state.add('Preloader', BunnyDefender.Preloader);

game.state.add('StartMenu', BunnyDefender.StartMenu);

game.state.add('Game', BunnyDefender.Game);

game.state.start('Boot');
